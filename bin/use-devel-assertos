#!perl

use strict;
# NB no warnings because of "implicit split to @_"

$/ = undef;

use File::Spec;
use Data::Compare;

my @files = grep { -f $_ } qw(Makefile.PL Build.PL);
push @files, 'Makefile.PL' unless(@files);

my @oses = @ARGV || die("You must specify at least one OS\n");

eval "use Devel::AssertOS"; # to load AssertOS and CheckOS

if($oses[0] eq '-l') {
    print join(', ', Devel::CheckOS::list_platforms())."\n";
    exit(0);
}

# NB can't just use scalar list_platforms cos that won't tell us that,
# eg, Linux::v2_6 also uses Linux
foreach my $os (@oses) {
    my $oldinc = { map { $_ => $INC{$_} } keys %INC }; # clone
    eval "use Devel::AssertOS qw($os)";
    if(Compare(\%INC, $oldinc)) {
        print STDERR "Couldn't find a module for $os\n";
        exit(1);
    }
}
my %modules = map { $_ => $INC{$_} } grep { /Devel/i && /(Check|Assert)OS/i } keys %INC;

mkdir 'inc';
mkdir 'inc/Devel';
mkdir 'inc/AssertOS';
print "Extra directories created under inc/\n";

open(MANIFEST, '>>MANIFEST') || die("Can't update MANIFEST\n");
foreach my $module (keys %modules) {
    my $dir = join('::', split(/\W+/, $module));
    $dir =~ s/::pm//;
    my @dircomponents = ('inc', (split(/::/, $dir)));
    pop @dircomponents;
    my $file = join('::', split(/\W+/, $module));
    $file =~ s/::pm/.pm/;
    $file =~ s/.*:://;
    mkdir File::Spec->catdir(@dircomponents);
    
    # copy($modules{$module},
    #      File::Spec->catfile(@dircomponents, $file));

    open(PM, $modules{$module}) ||
        die("Can't read $modules{$module}: $!");
    (my $pm = <PM>) =~ s/package Devel::/package #\nDevel::/;
    close(PM);
    open(PM, '>'.File::Spec->catfile(@dircomponents, $file)) ||
        die("Can't write ".File::Spec->catfile(@dircomponents, $file).": $!");
    print PM $pm;
    print "Copied $modules{$module} to\n       ".File::Spec->catfile(@dircomponents, $file)."\n";
    close(PM);

    print MANIFEST join('/', @dircomponents, $file)."\n";
}
close(MANIFEST);
print "Added necessary modules\n";
print "Updated MANIFEST\n";

foreach my $file (@files) {
    open(FILE, $file) || next;
    my $contents = <FILE>;
    close(FILE);
    open(FILE, ">$file") || die("Can't write $file\n");
    print FILE 'use lib inc; use Devel::AssertOS qw('.
        join(' ', @oses).
        ");\n\n";
    print FILE $contents;
    close(FILE);
    print "Modified $file\n";
}

=head1 NAME

use-devel-assertos - a script to package Devel::AssertOS modules
with your code.

=head1 DESCRIPTION

This script, when run in the directory in which your shiny new module
lives, will bundle whichever Devel::AssertOS modules you ask it to
in the C<inc> directory, and update your Makefile.PL (or Build.PL)
appropriately.  If neither exists, it will create a Makefile.PL.

=head1 SYNOPSIS

    use-devel-assertos NetBSD OpenBSD FreeBSD

=head1 USAGE

In the example above, this will insert code to make your module
depend on one of the specified OSes.

=head1 SUPPORTED PLATFORMS

To get a list of supported platforms, do this:

    use-devel-assertos -l

=head1 WARNINGS, BUGS and FEEDBACK

This script has not been thoroughly tested.  You should check by
hand that it has done what you expected after running it.

If you use Module::Build::Compat to write a Makefile.PL, then you
will need to re-run this script whenever you have generated a new
Makefile.PL.

I welcome feedback about my code, including constructive criticism.
Bug reports should be made using L<http://rt.cpan.org/> or by email.

=head1 SEE ALSO

L<Devel::AssertOS>

L<Devel::CheckOS>

=head1 AUTHOR

David Cantrell E<lt>F<david@cantrell.org.uk>E<gt>

=head1 COPYRIGHT and LICENCE

Copyright 2007 David Cantrell

This software is free-as-in-speech software, and may be used,
distributed, and modified under the same conditions as perl itself.

=head1 CONSPIRACY

This software is also free-as-in-mason.

=cut
